
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 15 12:30:03 2016
make a list about drifter ID, start time,days, min ,max,mean 

information from oracle website 

do first choose include 30yr roms or both in those two 

@author: qianran
"""

import csv
import datetime as dt
import pytz
import numpy as np
from matplotlib.path import Path
from oracle_getdrifter_list_function import getobs_drift_byrange,get_fvcom_gom3_grid,getobs_drift_byidrange,ingom3
####hard code###
model='30yr'#'30yr' 'roms' 'both'

#########code#####
if model =='30yr':
    input_time=[dt.datetime(1988,10,11,0,0,0,0,pytz.UTC),dt.datetime(2015,1,1,0,0,0,0,pytz.UTC)] # start time and end time
    gbox=[-57,-76,46,35]
    filename='oracle_drifter_list_30yr.csv'
elif model=='roms':
    input_time=[dt.datetime(2009,10,11,0,0,0,0,pytz.UTC),dt.datetime(2016,1,1,0,0,0,0,pytz.UTC)] # start time and end time
    gbox=[-67,-80,43,33]
    filename='oracle_drifter_list_roms.csv'
elif model=='both':
    input_time=[dt.datetime(2009,10,11,0,0,0,0,pytz.UTC),dt.datetime(2015,1,1,0,0,0,0,pytz.UTC)] # start time and end time
    gbox=[-67,-75,43,35]
    filename='oracle_drifter_list_both.csv'

 
drifter_data=[]
drifter=dict(ids=[],time=[],lon=[],lat=[])    
#drifters=dict(ids=[],start_time=[],end_time=[],days=[])    

ids=getobs_drift_byrange(gbox,input_time)
#print ids
'''listid.extend(ids)
    for q in listid:
        if q not in idlist:
            idlist.append(q)'''
print len(ids)
ID=[];days=[];starttime=[];means=[];maxs=[];mins=[]
#print ids
for i in range(len(ids)):
    timelist=[]
    span_time=[]
    print ids[i]
    drtime=[]

    drifter['time'],drifter['ids'],drifter['lon'],drifter['lat']=getobs_drift_byidrange(ids[i],gbox,input_time)
    #print idlist[i],gbox[g],input_time
    '''try:     
        drifter['time'],drifter['ids'],drifter['lon'],drifter['lat']=getobs_drift_byidrange(ids[i],gbox,input_time)
        
    except:
        pass'''
    #print drifter
    drifterlon=drifter['lon'].tolist()
    drifterlat=drifter['lat'].tolist()
    for t in range(len(drifter['time'])):
        if model=='roms':
             p = Path([[36.95, -79.59],[42.87, -71.43],[39.89, -67.71],[33.74,-75.84]])
             #print t,drifterlat[t],drifterlon[t]
             if p.contains_point((drifterlat[t],drifterlon[t]))==1:
                 drtime.append(drifter['time'][t])
        if model=='both':
             p = Path([[37.4, -75.3],[35.67, -73.63],[39.84, -67.91],[42.74,-71.42]])
             #print t,drifterlat[t],drifterlon[t]
             if p.contains_point((drifterlat[t],drifterlon[t]))==1:
                 drtime.append(drifter['time'][t])
        if model=='30yr':
            #from get_fvcom_gom3_grid import get_fvcom_gom3_grid
            Grid=get_fvcom_gom3_grid('disk')  
            #print ingom3(drifterlon[t],drifterlat[t],Grid)
            if ingom3(drifterlon[t],drifterlat[t],Grid)==True:
                drtime.append(drifter['time'][t])
            
    #print drtime
    '''for q in drtime:
        if q not in driftertime:
            driftertime.append(q)'''
    st=0
    for r in range(len(drtime)-1):       
        #print (drifter['time'][r+1]-drifter['time'][r]).days,st,r,len(drifter['time'])
        span_time.append((drtime[r+1]-drtime[r]).seconds)     
        #print span_time
        if (drtime[r+1]-drtime[r]).seconds>=10800:
            day=(drtime[r]-drtime[st]).days
            #print 1,ids[i],day,np.max(span_time[st:r])/3600,np.mean(span_time[st:r])/3600
            #print days
            if day>=10 and np.mean(span_time[st:r])/3600<=1.2:
                #print 1
                ID.append(ids[i])

                starttime.append(drtime[st])
                days.append(day)
                time=drtime[st:r]
                timelist.append(time)
                means.append("%.2f" %(np.mean(span_time[st:r])/float(3600)))
                mins.append("%.2f" %(np.min(span_time[st:r])/float(3600)))
                maxs.append("%.2f" %(np.max(span_time[st:r])/float(3600)))
            st=r+1
            continue
        elif  r==(len(drtime)-2):
            #print 2,ids[i],day,np.max(span_time[st:r])/3600,np.mean(span_time[st:r])/3600
            #print 2
            day=(drtime[r]-drtime[st]).days
            time=drtime[st:r]
            #print days
            if day>=10 and np.mean(span_time[st:r])/3600<=1.2:
               # print 3
                ID.append(ids[i])
                starttime.append(drtime[st])
                days.append(day)
                time=drtime[st:r]
                timelist.append(time)
                means.append("%.2f" %(np.mean(span_time[st:r])/float(3600)))
                mins.append("%.2f" %(np.min(span_time[st:r])/float(3600)))
                maxs.append("%.2f" %(np.max(span_time[st:r])/float(3600)))
    #print means,maxs,mins
    '''for a in range(len(drifter['time'])-1):
        time=drifter['time'][a+1]-drifter['time'][a]
        if time.days>=3:
            days=drifter['time'][a]-drifter['time'][0]
            break'''

drifter_data.append(ID)
drifter_data.append(starttime)
drifter_data.append(days)
drifter_data.append(means)
drifter_data.append(maxs)
drifter_data.append(mins)
#print drifter_data
dr=map(list, zip(*drifter_data))

###make a list
csvfile = file(filename, 'wb')
writer = csv.writer(csvfile)
writer.writerow(['ids', 'start_time', 'days','mean','max','min'])
writer.writerows(dr)
csvfile.close() 
