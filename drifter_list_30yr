# -*- coding: utf-8 -*-
"""
Created on Fri Jan 15 12:30:03 2016
make a list about drifter ID, start time,days, min ,max,mean 
gbox have 2 different box  one is roms range ,other is 30yr
roms time between 2009-2016  30yr is 1988-2014

do first choose 

@author: qianran
"""

import csv
import datetime as dt
import pandas as pd
import pytz
import numpy as np
from dateutil.parser import parse
####hard code###
model='roms'
if model =='30yr':
    input_time=[dt.datetime(1988,10,11,0,0,0,0,pytz.UTC),dt.datetime(2016,1,1,0,0,0,0,pytz.UTC)] # start time and end time
    gbox=[[-70.0,-75.0,40.0,37.5],[-63.0,-68.0,44.0,39.5],[-59.5,-63.0,45.0,41.0]]#roms[[-69.5,-74,41,39],[-72,-76,41,37.5],[-74.5,-76.5,38,35]]#30yr[[-70.0,-75.0,40.0,37.5],[-63.0,-68.0,44.0,39.5],[-59.5,-63.0,45.0,41.0]]
    filename='oracle_drifter_list_30yr.csv'
elif model=='roms':
    input_time=[dt.datetime(2009,10,11,0,0,0,0,pytz.UTC),dt.datetime(2016,1,1,0,0,0,0,pytz.UTC)] # start time and end time
    gbox=[[-69.5,-74,41,39],[-72,-76,41,37.5],[-74.5,-76.5,38,35]]#roms[[-69.5,-74,41,39],[-72,-76,41,37.5],[-74.5,-76.5,38,35]]#30yr[[-70.0,-75.0,40.0,37.5],[-63.0,-68.0,44.0,39.5],[-59.5,-63.0,45.0,41.0]]
    filename='oracle_drifter_list_roms.csv'
#######function###
def getobs_drift_byrange(gbox,input_time):
    """
   Function written by Huanxin and used in "getdrifter_erddap.py"
   get data from url, return id, latitude,longitude, and times
   gbox includes 4 values, maxlon, minlon,maxlat,minlat, like:  [-69.0,-73.0,41.0,40.82]
   input_time can either contain two values: start_time & end_time OR one  value:interval_days
   and they should be timezone aware
   example: input_time=[dt(2012,1,1,0,0,0,0,pytz.UTC),dt(2012,2,1,0,0,0,0,pytz.UTC)]
   """
    lon_max=gbox[0];lon_min=gbox[1];lat_max=gbox[2];lat_min=gbox[3]
    mintime=input_time[0].strftime('%Y-%m-%d'+'T'+'%H:%M:%S'+'Z')  # change time format
    maxtime=input_time[1].strftime('%Y-%m-%d'+'T'+'%H:%M:%S'+'Z')
    # open url to get data
    url='http://comet.nefsc.noaa.gov:8080/erddap/tabledap/drifters.csv?id&time>='\
    +str(mintime)+'&time<='+str(maxtime)+'&latitude>='\
    +str(lat_min)+'&latitude<='+str(lat_max)+'&longitude>='+str(lon_min)+'&longitude<='+str(lon_max)+'&orderBy("id")'
    df=pd.read_csv(url,skiprows=[1])
    ids=df.id.values
    news_ids = []
    for id in ids:
        if id not in news_ids:
            news_ids.append(id)


    return news_ids


def getobs_drift_byidrange(id,gbox,input_time):
    """
     Function written  by Huanxin and used by getdrifter_erddap.py
     get data from url, return ids latitude,longitude, times
     input_time can either contain two values: start_time & end_time OR one value:interval_days
     and they should be timezone aware
     example: input_time=[dt(2012,1,1,0,0,0,0,pytz.UTC),dt(2012,2,1,0,0,0,0,pytz.UTC)]
     """
    mintime=input_time[0].strftime('%Y-%m-%d'+'T'+'%H:%M:%S'+'Z')  # change time format
    maxtime=input_time[1].strftime('%Y-%m-%d'+'T'+'%H:%M:%S'+'Z')   
    lon_max=gbox[0];lon_min=gbox[1];lat_max=gbox[2];lat_min=gbox[3]
    # open url to get data
    url='http://comet.nefsc.noaa.gov:8080/erddap/tabledap/drifters.csv?id,time,latitude,longitude&time>='\
    +str(mintime)+'&time<='+str(maxtime)+'&latitude>='+str(lat_min)+'&latitude<='+str(lat_max)+'&longitude>='\
    +str(lon_min)+'&longitude<='+str(lon_max)+'&id="'+str(id)+'"&orderBy("id,time")'
    #print url
    df=pd.read_csv(url,skiprows=[1])
    #print df,type(df)
    #print 2
    for k in range(len(df)):
       df.time.values[k]=parse(df.time.values[k])

    return df.time.values,df.id.values
    

    

#####code  
drifter_data=[]
listid=[]
idlist=[]
drifter=dict(ids=[],time=[],)    
drifters=dict(ids=[],start_time=[],end_time=[],days=[])    
for r in range(len(gbox)): 
    ids=getobs_drift_byrange(gbox[r],input_time)
    listid.extend(ids)
    for q in listid:
        if q not in idlist:
            idlist.append(q)
#print idlist
ID=[];days=[];starttime=[];means=[];maxs=[];mins=[]
#print ids
for i in range(len(idlist)):
    timelist=[]
    span_time=[]
    print idlist[i]
    drtime=[]
    driftertime=[]
    for g in range(len(gbox)):
        #print idlist[i],gbox[g],input_time
        try:
            
            drifter['time'],drifter['ids']=getobs_drift_byidrange(idlist[i],gbox[g],input_time)
            drtime.extend(drifter['time'])
            
        except:
            pass
    drtimes=sorted(drtime)
    #print drtimes
    for q in drtime:
        if q not in driftertime:
            driftertime.append(q)
    st=0
    for r in range(len(driftertime)-1):       
        #print (drifter['time'][r+1]-drifter['time'][r]).days,st,r,len(drifter['time'])
        span_time.append((driftertime[r+1]-driftertime[r]).seconds)     
        #print span_time
        if (driftertime[r+1]-driftertime[r]).days>=1:
            day=(driftertime[r]-driftertime[st]).days
            
            #print days
            if day>=2:
                #print 1
                ID.append(idlist[i])
                starttime.append(driftertime[st])
                days.append(day)
                time=driftertime[st:r]
                timelist.append(time)
                means.append(np.mean(span_time[st:r]))
                mins.append(np.min(span_time[st:r]))
                maxs.append(np.max(span_time[st:r]))
            st=r+1
            continue
        elif  r==(len(driftertime)-2):
            #print 2
            day=(driftertime[r]-driftertime[st]).days
            time=driftertime[st:r]
            #print days
            if day>=2:
               # print 3
                ID.append(idlist[i])
                starttime.append(driftertime[st])
                days.append(day)
                time=driftertime[st:r]
                timelist.append(time)
                means.append(np.mean(span_time[st:r]))
                mins.append(np.min(span_time[st:r]))
                maxs.append(np.max(span_time[st:r]))
    #print means,maxs,mins
    '''for a in range(len(drifter['time'])-1):
        time=drifter['time'][a+1]-drifter['time'][a]
        if time.days>=3:
            days=drifter['time'][a]-drifter['time'][0]
            break'''

drifter_data.append(ID)
drifter_data.append(starttime)
drifter_data.append(days)
drifter_data.append(means)
drifter_data.append(maxs)
drifter_data.append(mins)
#print drifter_data
dr=map(list, zip(*drifter_data))

###make a list
csvfile = file(filename, 'wb')
writer = csv.writer(csvfile)
writer.writerow(['ids', 'start_time', 'days','mean','max','min'])
writer.writerows(dr)
csvfile.close() 
