# -*- coding: utf-8 -*-
"""
Created on Fri May  6 13:39:13 2016
animation
use website .csv data
@author: qzhang
"""

import csv
import urllib
import netCDF4
import sys
from decimal import *
import numpy as np
import matplotlib.pyplot as plt
import matplotlib 
from mpl_toolkits.basemap import Basemap
import pylab
import pandas as pd
from matplotlib import animation
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
##########hard code
filename = 'drift_vims_2016_3.dat'#'drift_ep_2016_1.csv'
title="GLERL drifters"#the name you want show on the .gif
sttime=datetime(2016,7,10)
end_time=datetime(2016,8,8)
save_dir = './Results/'
result ='animation'#plot  animation
linetime=24#hour
showtime_period=4
add_points=1#how many points want to add between two drifter points
colors = ['cyan','olive','orange','magenta','red','purple','black','blue']#,yellow'green'
mapmethod='usgs'#'etopo''usgs''bluemarble'#bluemarble and etopo both belong to basemap 
track='line'#'point''line'
zoom='off'#'on'
data_type='raw'#'raw''hourly'
zoom_area=[-81.5,-84,43,41]#[lon[max],lon[min],lat[max],lat[min]]
bathymetric=[-50,-7,-5,-2,-1]
interval_lon=1
interval_lat=0.5
#####drifter data 

dtimes=[]
points = {'lats':[],'lons':[],'ids':[],'times':[],'months':[],'days':[],'depths':[],'YEARDAY':[]} 
newfilename = 'new_%s' %filename
df=pd.read_csv(filename,header=None,skiprows=1); #get the drifter data 
ids = df[0][:] 
idlist = set(ids); #the # of drifters
addtime=[]
file_data=[]
for n in idlist:
    index = np.where(df[0]==n)[0]
    ddata = df.ix[index];

    dtimes=[]
    syear=str(ddata[0][index[0]])[0:2]
    #print syear,n
    for i in index:
        lon=ddata[7][i]
        lat=ddata[8][i]
        month=ddata[2][i]
        day=ddata[3][i]
        hour=ddata[4][i]
        minute=ddata[5][i]
        depth=ddata[9][i]
        YEARDAY=ddata[6][i]
        time='20'+str(syear)+'-'+str(month)+'-'+str(day)+' '+str(hour)+':'+str(minute)
        #print time
        dtimes.append(datetime.strptime(time, '%Y-%m-%d'+' '+'%H:%M' ))
        if len(dtimes)==1:
            pass
        elif dtimes[-1]<dtimes[-2]:
            dtimes[-1]=dtimes[-1] + relativedelta(years=1)
            print dtimes[-1]
            syear=int(syear)+1
            
            
        if zoom=='on':
            if lon<=zoom_area[0] and lon>=zoom_area[1] and lat<zoom_area[2] and lat>zoom_area[3] and depth<=-0.2 :
                if dtimes[-1]>sttime and dtimes[-1]<end_time:
                    points['times'].extend([dtimes[-1]])#.strftime('%Y-%m-%d %H:%M'))
                    #print points['times']
                    points['depths'].extend([depth])
                    points['YEARDAY'].extend([YEARDAY])
                    points['lons'].extend([lon]); points['lats'].extend([lat]);
                    points['ids'].extend([n]);points['months'].extend([month]);points['days'].extend([day])   
        if zoom=='off':
            time='20'+str(syear)+'-'+str(month)+'-'+str(day)+' '+str(hour)+':'+str(minute)   
            dtimes.append(datetime.strptime(time, '%Y-%m-%d'+' '+'%H:%M' ))
            #print time

            if len(dtimes)==1:
                pass
            elif dtimes[-1]<dtimes[-2]:
                dtimes[-1]=dtimes[-1] + relativedelta(years=1)
                syear=int(syear)+1


            if dtimes[-1]>sttime and dtimes[-1]<end_time:
                points['times'].extend([dtimes[-1]])#.strftime('%Y-%m-%d %H:%M'))
                points['lons'].extend([lon]); points['lats'].extend([lat]);points['depths'].extend([depth]);points['YEARDAY'].extend([YEARDAY])
                points['ids'].extend([n]);points['months'].extend([month]);points['days'].extend([day])
#print points
mintime=min(points['times'])     
#print mintime   
file_data.append(points['ids'])
file_data.append(points['months'])
file_data.append(points['days'])
file_data.append(points['times'])
file_data.append(points['lons'])
file_data.append(points['lats'])
file_data.append(points['YEARDAY'])
file_data.append(points['depths'])

dr=map(list, zip(*file_data))

###make a newfile about all right data
csvfile = file(newfilename, 'wb')
writer = csv.writer(csvfile)
writer.writerow(['ids', 'month', 'day','time','lon','lat','YEARDAY','depth'])
writer.writerows(dr)
csvfile.close() 

df=pd.read_csv(newfilename,header=None,skiprows=1); #get the drifter data 
ids = df[0][:] 
idlist = set(ids); #the # of drifters
print idlist
#######basemap and function

#######basemap and function
def haversine(lon1, lat1, lon2, lat2): 
    """ 
    Calculate the great circle distance between two points  
    on the earth (specified in decimal degrees) 
    """   
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])  
    #print 34
    dlon = lon2 - lon1   
    dlat = lat2 - lat1   
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2  
    c = 2 * atan(sqrt(a)/sqrt(1-a))   
    r = 6371 
    d=c * r
    #print type(d)
    return d
def get_nc_data(url, *args):
    '''
    get specific dataset from url

    *args: dataset name, composed by strings
    ----------------------------------------
    example:
        url = 'http://www.nefsc.noaa.gov/drifter/drift_tcs_2013_1.dat'
        data = get_url_data(url, 'u', 'v')
    '''
    nc = netCDF4.Dataset(url)
    data = {}
    for arg in args:
        try:
            data[arg] = nc.variables[arg]
        except (IndexError, NameError, KeyError):
            print 'Dataset {0} is not found'.format(arg)
    #print data
    return data
def nearpoint_index(lat,lon):
    '''get the nearest point index from fvcom wind model'''
    #print lat,lon
    dists=[];points=[]
    url_wind="""http://www.smast.umassd.edu:8080/thredds/dodsC/models/fvcom/NECOFS/Forecasts/NECOFS_MET_HINDCAST.nc?XLAT[0:1:140][0:1:182],XLONG[0:1:140][0:1:182]"""  #%(year,ftime,stime,lats,lats,lons,lons)
    vdata=get_nc_data(url_wind,'XLAT','XLONG')
    LAT=vdata['XLAT'][:];LON=vdata['XLONG'][:]


    for a in range(140):#have 141 group data
        #print max(LAT[a]), min(LAT[a]) ,max(LON[a]) ,min(LON[a]),lat,lon
        if lat<max(LAT[a]) and lat>min(LAT[a]) and lon<max(LON[a]) and lon>min(LON[a]):
            for o in range(182):#every group have 182 data
                if lon-0.1<LON[a][o]<lon+0.1 and lat-0.1<LAT[a][o]<lat+0.1:
                    print a,o,LON[a][o],LAT[a][o]
                    points.append((a,o))
                    dist=haversine(LON[a][o],LAT[a][o],lon,lat)
                    dists.append(dist)
    if len(dists)>1:
        for i in range(len(dists)):
            print dists[i]-min(dists)
            if dists[i]-min(dists)<0.001:
                index=i
    else :
        print "something wrong"
    return points[index]
def draw_basemap(ax, points, interval_lon, interval_lat):#we use interval_lon control the longitude  tick labels
    '''
    use basemap function draw the map 
    we use interval_lon control the longitude tick labels on axis
    when we use 'etopo' ,the file will bigger than 'bluemarble' 
    '''

    lons = points['lons']
    lats = points['lats']
    size = max((max(lons)-min(lons)),(max(lats)-min(lats)))/10
    map_lon = [min(lons)-size,max(lons)+size]
    map_lat = [min(lats)-size,max(lats)+size]
    
    #ax = fig.sca(ax)
    dmap = Basemap(projection='cyl',
                   llcrnrlat=map_lat[0], llcrnrlon=map_lon[0],
                   urcrnrlat=map_lat[1], urcrnrlon=map_lon[1],
                   resolution='h',ax=ax)# resolution: c,l,i,h,f.
    dmap.drawparallels(np.arange(int(map_lat[0])-1,
                                 int(map_lat[1])+1,interval_lat),
                       labels=[1,0,0,0])
    dmap.drawmeridians(np.arange(int(map_lon[0])-1,
                                 int(map_lon[1])+1,interval_lon),
                       labels=[0,0,0,1])
    
    #dmap.drawcoastlines()# draw the coast line
    dmap.fillcontinents(color='grey')
    if mapmethod=='etopo':
        dmap.etopo()#use this one make .gif file bigger than use bluemarble 
    elif mapmethod=='bluemarble':
        dmap.bluemarble()#choose this one or etopo

def lat2str(deg):
    min = 60 * (deg - np.floor(deg))
    deg = np.floor(deg)
    dir = 'N'
    if deg < 0:
        if min != 0.0:
            deg += 1.0
            min -= 60.0
        dir = 'S'
    if np.floor(min)==0:        
      return (u"%d\N{DEGREE SIGN}%s") % (np.abs(deg),dir)
    else:  
      return (u"%d\N{DEGREE SIGN} %g' %s") % (np.abs(deg),np.abs(min),dir)
  
def lon2str(deg):
    min = 60 * (deg - np.floor(deg))
    deg = np.floor(deg)
    dir = 'E'
    if deg < 0:
        if min != 0.0:
            deg += 1.0
            min -= 60.0
        dir = 'W'
    if np.floor(min)==0:        
      return (u"%d\N{DEGREE SIGN}%s") % (np.abs(deg),dir)
    else:  
      return (u"%d\N{DEGREE SIGN} %g' %s") % (np.abs(deg),np.abs(min),dir)

def basemap_usgs(points,bathy,cont_range,ss):
    #plot the coastline and, if bathy is True, bathymetry is plotted
    # lat and lon can be any list of positions in decimal degrees
    #parallels_interval is the tick interval on axis
    #cont_range is the depth contours to plot
    #ss is the subsample rate to make things quicker

    if zoom=='on':
        map_lon = [zoom_area[1],zoom_area[0]]
        map_lat = [zoom_area[3],zoom_area[2]]
    else:
        lons = points['lons']
        lats = points['lats']
        size = max((max(lons)-min(lons)),(max(lats)-min(lats)))/10
        map_lon = [min(lons)-size,max(lons)+size]
        map_lat = [min(lats)-size,max(lats)+size]



    print map_lon,map_lat
    #ax = fig.sca(ax)
    dmap = Basemap(projection='cyl',
                   llcrnrlat=map_lat[0], llcrnrlon=map_lon[0],
                   urcrnrlat=map_lat[1], urcrnrlon=map_lon[1],
                   resolution='h',ax=ax)# resolution: c,l,i,h,f.
    '''dmap.drawparallels(np.arange(int(map_lat[0])-1,
                                 int(map_lat[1])+1,interval_lat),
                       labels=[1,0,0,0])
    dmap.drawmeridians(np.arange(int(map_lon[0])-1,
                                 int(map_lon[1])+1,interval_lon),
                       labels=[0,0,0,1])'''
    #dmap.drawcoastlines()# draw the coast line
    dmap.fillcontinents(color='grey')
    #url='http://geoport.whoi.edu/thredds/dodsC/bathy/crm_vol1.nc'


    base_url='http://coastwatch.pfeg.noaa.gov/erddap/griddap/usgsCeSrtm30v6.nc?'
    isub=1  # make isub =1 in production mode

    query='topo[(%f):%d:(%f)][(%f):%d:(%f)]' % (map_lat[1],isub,map_lat[0],map_lon[0],isub,map_lon[1])

    url = base_url+query
    file='usgsCeSrtm30v6.nc'
    urllib.urlretrieve (url, file)
    nc = netCDF4.Dataset(file)
    ncv = nc.variables

    basemap_lat=ncv['latitude'][:]
    basemap_lon=ncv['longitude'][:]
    basemap_topo=ncv['topo'][:]
    print map_lat[0],basemap_lat,range(0,basemap_lat.shape[0]),map_lon[0],basemap_lon,range(0,basemap_lon.shape[0])

    index_minlat=int(round(np.interp(map_lat[0],basemap_lat,range(0,basemap_lat.shape[0]))))
    index_maxlat=int(round(np.interp(map_lat[1],basemap_lat,range(0,basemap_lat.shape[0]))))
    index_minlon=int(round(np.interp(map_lon[0],basemap_lon,range(0,basemap_lon.shape[0]))))
    index_maxlon=int(round(np.interp(map_lon[1],basemap_lon,range(0,basemap_lon.shape[0]))))
    
    min_index_lat=min(index_minlat,index_maxlat)
    max_index_lat=max(index_minlat,index_maxlat)
    min_index_lon=min(index_minlon,index_maxlon)
    max_index_lon=max(index_minlon,index_maxlon)
    #ss=5 #subsample
    print "Using the USGS high res bathy with topo indexes: "+str(min_index_lat)+','+str(max_index_lat)+','+str(min_index_lon)+','+str(max_index_lon)
    X,Y=np.meshgrid(basemap_lon[min_index_lon:max_index_lon:ss],basemap_lat[min_index_lat:max_index_lat:ss])

    # You can set negative contours to be solid instead of dashed:
    matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
    #if bathy==True:
        #CS=plt.contourf(X,Y,basemap_topo.topo[min_index_lat:max_index_lat:ss,index_minlon:index_maxlon:ss],cont_range)#,colors=['0.8'])#,linewith=0.05)#cont_range)#,colors=['0.75','0.80','0.85','0.90'],linewith=0.05)
    CS=plt.contour(X,Y,basemap_topo[min_index_lat:max_index_lat:ss,index_minlon:index_maxlon:ss],cont_range,linewidths=0.5)#cont_range)#,colors=['0.75','0.80','0.85','0.90'],linewith=0.05)
    plt.clabel(CS, fmt='%5.0f m', colors='b', fontsize=8)

    if min_index_lat==max_index_lat:
        print "No basemap_usgs data available for this area"
    #else: 
       #plt.contourf(X,Y,basemap_topo[min_index_lat:max_index_lat:ss,min_index_lon:max_index_lon:ss],[0,1000],colors='0.5')

def sh_interp3(ti,t,f):
    """
    interpolates irragularly spaced 1D data to uniform grid
    using cubuc Hermite spline.
    http://en.wikipedia.org/wiki/Cubic_Hermite_spline
    tangents are defined as a finite difference approximation of derivative
    interpolation formula is expressed in terms of 
    Bernstein polynomials of 3rd order: B_0,B_1,B_2,B_3.
    """
    #print ti,t
    m=f*0. # derivative
    N=len(f)
    for i in range(1,N-1):
# In this version the tangent m is a plain average of differences from two sides
# which is not consistent with the finite difference
# approximation of a derivative on a nonuniform grid
#        m[i]=((f[i+1]-f[i])/(t[i+1]-t[i])+(f[i]-f[i-1])/(t[i]-t[i-1]))*0.5
# This version of the tangent m is the finite difference
# approximation of a derivative on a nonuniform grid 

        ha=t[i+1]-t[i]
        hb=t[i]-t[i-1]        
        m[i]=((f[i+1]-f[i])*hb/ha+(f[i]-f[i-1])*ha/hb)/(ha+hb)
    # ends
    m[0]  =2.*(f[1]  -f[0])  /(t[1]  -t[0])  -m[1]
    m[N-1]=2.*(f[N-1]-f[N-2])/(t[N-1]-t[N-2])-m[N-2]    
        
    # 
    fi=ti*0.
    NN=len(ti)
    for ii in range(NN):
        #print i,ti[ii]
        i=max(np.argwhere(t<=ti[ii])) # left end of segment

        dt=t[i+1]-t[i]
        a=(ti[ii]-t[i])/dt  # 0<a<1 normalized coordinate within a segment 
        b=1.-a
        # multiply f and m*dt must have the same dimensions
        fi[ii]=(b*b*b+3.*a*b*b)*f[i]+(a*a*a+3.*b*a*a)*f[i+1]+(a*b*b*m[i]-b*a*a*m[i+1])*dt

    return fi
    
def distance(origin, destination):
    """ 
    Calculates both distance and bearing
    """
    lat1, lon1 = origin
    lat2, lon2 = destination
    if lat1>1000:
        (lat1,lon1)=dm2dd(lat1,lon1)
        (lat2,lon2)=dm2dd(lat2,lon2)
        #print 'converted to from ddmm to dd.ddd'
    radius = 6371 # km
    

    dlat = math.radians(lat2-lat1)
    dlon = math.radians(lon2-lon1)
    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) \
        * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    d = radius * c
    
    def calcBearing(lat1, lon1, lat2, lon2):
       dLon = lon2 - lon1
       y = math.sin(dLon) * math.cos(lat2)
       x = math.cos(lat1) * math.sin(lat2) \
           - math.sin(lat1) * math.cos(lat2) * math.cos(dLon)
       return math.atan2(y, x)
       
    bear= math.degrees(calcBearing(lat1, lon1, lat2, lon2))  
    return d,bear
    
def sd2uv(s,d):
    r = d2r(d)
    u = s * math.sin(r)
    v = s * math.cos(r)
    return (u,v)  
def d2r(d):
    r = d * math.pi / 180.0
    return (r)
    
def ll2uv_datetime(dt,lat,lon):#dt is datetime
    "based on yearday,lat,lon.  you can get latitude speed and longitude speed "
    diff_time = []
    ddt=[] # velocity time
    for i in range(len(dt)-1):
        diff_time.append((dt[i+1]-dt[i])*86400)
        #print dt[i+1],dt[i],diff_time
        ddt.append(dt[i]+(diff_time[i]/2.0))
   
    u,v,spd=[],[],[]
    #print len(dt),len(lat),
    for i in range(len(dt)-1):
        #print lat[i],lon[i],lat[i+1],lon[i+1]
        (dkm,bear)=distance([lat[i],lon[i]],[lat[i+1],lon[i+1]])
        u.append(sd2uv(float(dkm*100000)/diff_time[i],bear)[0])
        v.append(sd2uv(float(dkm*100000)/diff_time[i],bear)[1])
        spd.append(np.sqrt(u[i]**2+v[i]**2))
    return u,v,spd
    
def sh_rmtide(f,dt=1.,ends=0.):
    """
    removes solar and lunar tidal signal by sequentially averaging 
    over their periods: of 24h and 24h50.47m. This is equivalent to
    applying convolution with a trapezoidal shaped window (almost triagular).
    
    f - input tidal sequence
    dt - uniform time step of input series, in hours, dt=1. hr default
    ends - fill value for the ends: 0. or nan
    
    fm = sh_rmtide(f,dt=1.,ends=np.nan)
    """
    TS=24. # Solar hour angle period 24h
    TL=24.+50.47/60. # Lunar hour angle period
    N=len(f)
    fm=np.zeros(N)*ends

# remove solar period    
    T=TS/dt
    m=int(np.floor((T-1.)/2.))
    w=(T-(2*m+1))*0.5
# all weights =1 except at ends      
#    print w
    for i in range(m+1,N-m-1-1):
        #print len(f[i-m:i+m+1])
        fm[i]=(np.sum(f[i-m:i+m+1])+w*f[i-m-1]+w*f[i+m+1])/T
        
# remove lunar period
    f=fm*1.0  # deep copy!  
    T=TL/dt
    m=int(np.floor((T-1.)/2.))
    w=(T-(2*m+1))*0.5
# all weights =1 except at ends      
#    print w
    for i in range(m+1,N-m-1-1):
        #print len(f[i-m:i+m+1])
        fm[i]=(np.sum(f[i-m:i+m+1])+w*f[i-m-1]+w*f[i+m+1])/T
    
    return fm
########animation    
if sttime<mintime   :
    start_time=mintime
else:
    start_time=sttime
points_all= {'lats':[],'lons':[]} 

yearday=[];lons = []; lats = []; loop_num = []; times =[]; ctime = []; toltime = [] #mint = []; maxt = []

for i in idlist:
    points= {'lats':[],'lons':[],'times':[]}  
    index = np.where(df[0]==i)[0]
    ddata = df.ix[index]; 
    if data_type=='raw':
        
        points_all['lons'].extend(ddata[4]); points_all['lats'].extend(ddata[5]);yearday.extend(ddata[6])
        ts = []; ds = []
        for j in range(len(ddata)):
    
            strt=ddata[3][index[j]]
            temptime = datetime.strptime(strt,'%Y-%m-%d'+' '+'%H:%M:%S')
            ts.append(temptime) #'''
            ths = (temptime - start_time).total_seconds()/3600
            ds.append(int(round(ths)))
    
            
        #mint.append(min(ds)); maxt.append(max(ds))
        times.append(np.array(ts)); ctime.append(np.array(ds)); toltime.extend(ds)
        lons.append(np.array(ddata[4])); lats.append(np.array(ddata[5]))
        
    

    elif data_type=='rmtide':
        points['lons'].extend(ddata[4]); points['lats'].extend(ddata[5]); points['times'].extend(ddata[3])
        points_all['lons'].extend(ddata[4]); points_all['lats'].extend(ddata[5]);yearday.extend(ddata[6])
        ts = []; ds = [];rawtime=[]
        if len(points['times'])>2:
            for t in range(len(points['times'])):
                
                rawtime.append(date2num(datetime.strptime(points['times'][t],'%Y-%m-%d'+' '+'%H:%M:%S')))
    
            t1=np.ceil(np.min(rawtime)*24.)/24.
            t2=np.floor(np.max(rawtime)*24.)/24.
            tdh=np.arange(t1,t2,1./24.)
            #print t1,t2,tdh,rawtime
            latdh=sh_interp3(np.array(tdh),np.array(rawtime),np.array(points['lats']))
            londh=sh_interp3(np.array(tdh),np.array(rawtime),np.array(points['lons']))
            for j in range(len(tdh)):
                #print 1,start_time.month,tdh[j]
                temptime=num2date(tdh[j]).replace(tzinfo=None)
                ts.append(temptime)
                ths = (datetime(2016,1,1)+timedelta(tdh[j]) - start_time).total_seconds()/3600
                ds.append(int(round(ths)))
            #print points['times'],latdh,londh
        

            latrh=sh_rmtide(latdh,ends=np.NaN)
            lonrh=sh_rmtide(londh,ends=np.NaN)
            #print vrt
            #for i in range(len(vrt)):'''
                
        else:
            for j in range(len(ddata)):
    
                strt=ddata[3][index[j]]
                temptime = datetime.strptime(strt,'%Y-%m-%d'+' '+'%H:%M:%S')
                ts.append(temptime) #'''
                ths = (temptime - start_time).total_seconds()/3600
                ds.append(int(round(ths)))
            londh=ddata[4];latdh=ddata[5]
            lonrh=londh;latrh=latdh
        #mint.append(min(ds)); maxt.append(max(ds))
        times.append(np.array(ts)); ctime.append(np.array(ds)); toltime.extend(ds)
        lons.append(londh); lats.append(latdh)
        
    elif data_type=='hourly':
        points['lons'].extend(ddata[4]); points['lats'].extend(ddata[5]); points['times'].extend(ddata[3])
        points_all['lons'].extend(ddata[4]); points_all['lats'].extend(ddata[5]);yearday.extend(ddata[6])
        ts = []; ds = [];rawtime=[]
        if len(points['times'])>2:
            for t in range(len(points['times'])):
                
                rawtime.append(date2num(datetime.strptime(points['times'][t],'%Y-%m-%d'+' '+'%H:%M:%S')))
    
            t1=np.ceil(np.min(rawtime)*24.)/24.
            t2=np.floor(np.max(rawtime)*24.)/24.
            tdh=np.arange(t1,t2,1./24.)
            #print t1,t2,tdh,rawtime
            latdh=sh_interp3(np.array(tdh),np.array(rawtime),np.array(points['lats']))
            londh=sh_interp3(np.array(tdh),np.array(rawtime),np.array(points['lons']))
            for j in range(len(tdh)):
                #print 1,start_time.month,tdh[j]
                temptime=num2date(tdh[j]).replace(tzinfo=None)
                ts.append(temptime)
                ths = (datetime(2016,1,1)+timedelta(tdh[j]) - start_time).total_seconds()/3600
                ds.append(int(round(ths)))

        else:
            for j in range(len(ddata)):
    
                strt=ddata[3][index[j]]
                temptime = datetime.strptime(strt,'%Y-%m-%d'+' '+'%H:%M:%S')
                ts.append(temptime) #'''
                ths = (temptime - start_time).total_seconds()/3600
                ds.append(int(round(ths)))
            londh=ddata[4];latdh=ddata[5]
            lonrh=londh;latrh=latdh
        #mint.append(min(ds)); maxt.append(max(ds))
        times.append(np.array(ts)); ctime.append(np.array(ds)); toltime.extend(ds)
        lons.append(londh); lats.append(latdh)
 
 
#mintime = min(mint); maxtime = max(maxt)
#mtime = range(mintime,maxtime+1)
toltime = set(toltime); 
toltime = list(toltime); toltime.sort(); print 'plotting...',len(toltime)



if result == 'plot':
    for i in range(len(lons)):
        plt.plot(lons[i],lats[i],'-',color = colors[i%10],markersize=20)

#ax.plot(drifter_points['lon'],drifter_points['lat'],'bo-',markersize=6,label='Drifter')
'''ax.annotate(an2,xy=(dr_points['lon'][-1],dr_points['lat'][-1]),xytext=(dr_points['lon'][-1]+0.01*track_days,
            dr_points['lat'][-1]+0.01*track_days),fontsize=6,arrowprops=dict(arrowstyle="fancy"))#'''


    
#compare to the 'animation','banimation' is more fit the file which have more drifter  or more data 
if result == 'animation':
    ailoops = int((toltime[-1]-toltime[0])/showtime_period)
    print 'frame:',ailoops
    def animate(n):
        #print n
        del ax.lines[:]#del ax.collections[:]ax.cla()

        supt = (start_time + n*timedelta(hours=showtime_period)).strftime('%Y-%m-%d')  
       
        drawst=start_time + n*timedelta(hours=showtime_period)
        drawend=drawst+timedelta(hours=linetime)
        #print supt        
        plt.suptitle('%s  \n date: %s'%(title,supt),fontsize=12)   


        '''index=nearpoint_index(0.5*(zoom_area[2]+zoom_area[3]),0.5*(zoom_area[0]+zoom_area[1]))
        
        cptime="2016,06,29,00,00" 
        cptimes=datetime.strptime(cptime, '%Y,%m,%d,%H,%M')
        print start_time + n*timedelta(hours=showtime_period),(start_time + n*timedelta(hours=showtime_period)-cptimes)
        time_s=(start_time + n*timedelta(hours=showtime_period)-cptimes).total_seconds()
        print time_s
        timeindex=int(time_s/60/60)


        url_wind="""http://www.smast.umassd.edu:8080/thredds/dodsC/models/fvcom/NECOFS/Forecasts/NECOFS_MET_HINDCAST.nc?U10[%i:1:%i][%i:1:%i][%i:1:%i],V10[%i:1:%i][%i:1:%i][%i:1:%i]"""  %(timeindex,timeindex,index[0],index[0],index[1],index[1],timeindex,timeindex,index[0],index[0],index[1],index[1])
        print url_wind
        data=get_nc_data(url_wind,'V10','U10')
        v_wind=data['V10'][:];u_wind=data['U10'][:]
        print v_wind[0][0][0]'''
        for i in range(len(lons)): #loop drifters
            std=times[i]-drawst
            sindex = np.argmin(abs(std))
            etd=times[i]-drawend
            eindex = np.argmin(abs(etd))

            seglength=eindex-sindex

            c = colors[i%len(colors)]
            if track=='line':
                abct = ctime[i] - (toltime[0]+n*showtime_period)
                #print n,toltime[0]+n*showtime_period
                ni = np.argmin(abs(abct)); 

                marksize=6
                ax.plot(lons[i][ni],lats[i][ni],'o',color=c,markersize=marksize+2,markeredgecolor = 'none')
                for k in range(min(seglength,ni)):
                    marksize=6-float((6*k)/seglength)

                    #linew=marksize-1.5      
                    
                    ax.plot([lons[i][ni-k-1],lons[i][ni-k]],[lats[i][ni-k-1],lats[i][ni-k]],'-', color=c,linewidth=marksize)                           
        
                    '''elif track=='spline':
                        abct = ctime[i] - (toltime[0]+n*showtime_period)
                        #print abct
                        ni = np.argmin(abs(abct)); 
                        #print ni
                        marksize=6
                        for k in range(min(seglength,ni)):
                            if k<4:
                                marksize=6-float((6*k)/seglength)
            
                                #linew=marksize-1.5      
                                ax.plot(lons[i][ni],lats[i][ni],'o',color=c,markersize=marksize+2,markeredgecolor = 'none')
                                ax.plot([lons[i][ni-k-1],lons[i][ni-k]],[lats[i][ni-k-1],lats[i][ni-k]],'-', color=c,linewidth=marksize)                           
                            else:
                                a=[]
                                b=[]
                                for k in range(4,seglength):
                                    #print k
                                    marksize=6-float((6*k)/seglength)
                                    
                                    lon=lons[i][ni-4:ni+1]
                                    lat=lats[i][ni-4:ni+1]
                                    
                                    tck,u= interpolate.splprep([lon,lat], s=0)
                                    print tck,u
                                    unew = np.arange(0, 1.01, 0.05)
                                    out = interpolate.splev(unew, tck)
                                    #print out
                                    a.extend(out[0])
                                    b.extend(out[1])
                                    ax.plot( a, b, 'bo-',color=c,markersize=marksize,markeredgecolor = 'none')
                                    plt.show'''
            
            elif track=='point':
                if toltime[n] > ctime[i][-1]:
                    if toltime[n-seglength]<ctime[i][-1]:
                        lki = ctime[i] - toltime[n-seglength]
                        nik = np.argmin(abs(lki)); 
                        wlp = len(ctime[i])-nik
                        for j in range(wlp):
                            ax.plot(lons[i][-(j+1)],lats[i][-(j+1)],'o-',color=c,markersize=wlp-j+1,markeredgecolor = 'none')                  

                        
                    else:
    
                        ax.plot(lons[i][-1],lats[i][-1],'o-',color=c,markersize=10)
                else:
    
                    abct = ctime[i] - toltime[n]
                    ni = np.argmin(abs(abct)); 
                    
                    if ni<seglength:
                        while (ni>=0):
                            ax.plot(lons[i][ni],lats[i][ni],'o',color=c,markersize=ni+1,markeredgecolor = 'none')
                            ni=ni-1

                    else:

                        for k in range(seglength):
                            ax.plot(lons[i][ni-k],lats[i][ni-k],'o-',color=c,markersize=seglength-k,markeredgecolor = 'none')

            
                    
        
    if mapmethod=='etopo' or mapmethod=='bluemarble':
        fig = plt.figure() #figsize=(10,9)
        #can use this to control where the picture is 
        ax = fig.add_subplot(111)
        draw_basemap(ax,points_all, interval_lon,interval_lat)  # points is using here

        anim = animation.FuncAnimation(fig, animate, frames=ailoops, interval=100) 
    elif mapmethod=='usgs':
        fig = plt.figure() #figsize=(16,12)
        #can use this to control where the picture is 
        ax = fig.add_subplot(111)
        basemap_usgs(points_all,True,bathymetric,1)
        thismanager3 = pylab.get_current_fig_manager()

        anim = animation.FuncAnimation(fig, animate, frames=ailoops, interval=100) 

    en_run_time = datetime.now()
    # mencoder,imagemagick,ffmpeg
if zoom=='on':
    anim.save(save_dir+'%s_zoom.gif'%(filename[:-4]),writer='imagemagick',dpi=100)#file name
else:
    anim.save(save_dir+'%s.gif'%(filename[:-4]),writer='imagemagick',dpi=100)#file name
plt.show()

