# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 11:38:36 2015
get the drifter data ('raw''csv','oracle' or drifter list)
and get the model data('GOM3','massbay','ROMS').
compare drifter and model track get dis,mean dis

@author: Qianran
"""
import datetime as dt
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import numpy as np
import csv
from drifter_vs_model_function import get_drifter_track,get_fvcom,get_roms,cpdrtime,model_start_point,calculate_SD,dealdrpoint,timedeal
######## Hard codes ##########
method_of_drifter='oracle'#'raw''csv','oracle'   the method of get drifter data
Model=['ROMS']#'GOM3','massbay','30yr','ROMS'# model want to be compair with drifter track
drifter_ID = ['106340751']#if drifter_ID=[],get drifter id from list
#drifter_list='oracle_drifter_list_both.csv'#get from get_drifter_list code
depth = 1 
days=[8]#how many days want to compair#if use 'raw' max days is 3#how many drifter have how many data 
track_days=1#each time how many days want to compair
restart_days=1#how many days you want to restart compair
start_time =[dt.datetime(2010,06,06,6,0,0,0)]#dt.datetime(2012,06,02,0,0,0,0)#datetime.utcnow()-timedelta(days)#how many drifter have how many data 
######## Drifter and model track ##########
if 'ROMS' in Model and '30yr' in Model:
    drifter_list='oracle_drifter_list_both.csv'
elif 'ROMS' in Model and '30yr' not in Model:
    drifter_list='oracle_drifter_list_roms.csv'
elif 'ROMS' not in Model and '30yr' in Model:
    drifter_list='oracle_drifter_list_30yr.csv'
drifterID=[];distance=[]
if 'ROMS' in Model:
    romsmeandis=[];romsmindis=[];romsmaxdis=[]
if '30yr' in Model:
    yrmeandis=[];yrmindis=[];yrmaxdis=[]
if 'GOM3' in Model:
    gommeandis=[];gommindis=[];gommaxdis=[]
if 'massbay' in Model:
    massmeandis=[];massmindis=[];massmaxdis=[];
if drifter_ID==[]:
    start_time=[]
    end_time=[]
    dr_points = np.genfromtxt(drifter_list,dtype=None,names=['ids','start_time','days','mean','max','min'],delimiter=',',skip_header=1)    
    day=dr_points['days'] 
    mintime=dr_points['min'] 
    drifter_ID=dr_points['ids']
    for i in range(len(dr_points['ids'])):
        dt_time=datetime.strptime(dr_points['start_time'][i], '%Y-%m-%d'+' '+'%H:%M:%S+00:00')       
        start_time.append(dt_time)
    #print start_time
else:
    day=[]
    for b in range(len(drifter_ID)):
        day.append(99)        


for q in range(len(drifter_ID)):        
    meandis=[]
    drifter_points = dict(lon=[],lat=[],time=[])
    if  method_of_drifter=='oracle':
        id=drifter_ID
    if day[q]>days[0]:
        days.append(days[0])
    else:
        days.append(day[q]-1)
    # go get drifter track for this id
    drifter_points,ids,drifter_points['time']=get_drifter_track(method_of_drifter,start_time[q],days[q+1],drifter_ID[q],id[q])  
    dftime=timedeal(drifter_points['time'])
    #print dftime
    if dftime<35: #minutes
        # get drifter data nearest "on the hour" to be the same as the model
        #print 123
        drifter_points['lon'],drifter_points['lat'],drifter_points['time']=dealdrpoint(start_time[q],days[q+1],drifter_points['lon'],drifter_points['lat'],drifter_points['time'])
    #print drifter_points   
        
    print 1
    for i in Model:
        dis=dict(dis=[],time=[])
        #time=[]
        model_points =dict(lon=[],lat=[],time=[]) #note the underscore "model_points" is the whole track
        #drlon = []; drlat = [];drtime=[]
        for m in np.arange(0,days[q+1],restart_days):  
            modelpoints = dict(lon=[],lat=[],time=[]) # this is for track_days of the track
            start_times=drifter_points['time'][0]+timedelta(m)
            end_times=start_times+timedelta(days=track_days)
            # now get the model start position at this time
            stpointlon,stpointlat=model_start_point(drifter_points['time'],start_times,drifter_points['lon'],drifter_points['lat'])#get the model everyday start point 
            #print stpointlon,stpointlat 
            GRIDS= ['GOM3','massbay','30yr']#those three model can use one function to get model data
            if i in GRIDS:
                get_obj =  get_fvcom(i)
                url_fvcom = get_obj.get_url(start_times,end_times)
                b_points = get_obj.get_data(url_fvcom) # b_points is model boundary points.
                modelpoint = get_obj.get_track(stpointlon,stpointlat,depth)#get one day model data
                #print modelpoint
                print 2
            if i=='ROMS':        
                get_obj = get_roms()
                url_roms = get_obj.get_url(start_times,end_times)
                get_obj.get_data(url_roms)
                modelpoint = get_obj.get_track(stpointlon,stpointlat,depth)#,DEPTH
                if len(modelpoint['lon'])==1:
                    print 'Start point on the land or out of Model area.'
                print 3
            dtimenp = np.array(drifter_points['time'])
            dst = dtimenp-start_times; dstindex = np.argmin(abs(dst))#every compare days drifter start index
            det = dtimenp-end_times; detindex = np.argmin(abs(det))#every compare days drifter end index
            drlon=drifter_points['lon'][dstindex:detindex+1]#very compare days drifter point
            drlat=drifter_points['lat'][dstindex:detindex+1]
            drtime=drifter_points['time'][dstindex:detindex+1]
            #print drtime    
            modelpoints['lon'],modelpoints['lat'],modelpoints['time']=cpdrtime(drifter_points['time'][dstindex:detindex+1],modelpoint['lon'],modelpoint['lat'],modelpoint['time'])#compare to the drifter time get the  same time model data   '''         
            #print modelpoints  
            model_points['lon'].append(modelpoints['lon']); model_points['lat'].append(modelpoints['lat']);model_points['time'].append(modelpoints['time'])#model_points is all days data modelpoints is only one days data
            #print len(drtime[m]),len(modelpoint['time'])
            # make sure the model has at least as many points as the drifter 
            # if the model, for example, goes out of the domain, it will have less # of points 
            #print  len(drtime[m]),len(modelpoint['time'])
            if len(drtime)<=len(modelpoint['time']):
                #print 123
                
                dist,meandis=calculate_SD(modelpoints,drlon,drlat,drtime)
                #print meandis
                dis['dis'].append(dist)
                distance.extend(meandis)
        #print dis['dis'],distance
                #modelpoints['lon'],modelpoints['lat'],modelpoints['time']=cpmotime(drifter_points['time'][dstindex:detindex+1],modelpoint['lon'],modelpoint['lat'],modelpoint['time'])

            #print dis['dis']'''

                
        '''for a in range(len(model_points['lon'])):
            dis_time=[]
            for t in range(len(model_points['time'][a])):
                outtime = datetime.strftime(model_points['time'][a][t],'%H')
                outtimes=int(outtime)
                dis_time.append(outtimes)
                #print dis_time
            dis['time'].append(dis_time)
        #print dis_times
        forlen(model_points['lon']) a in range(len(nplons)):
            d=haversine(nplons[a],nplats[a],drifter_points['lon'][a],drifter_points['lat'][a])
            dd.append(d)#'''
            
        
            
        '''#print len(model_points['lon']),len(drifter_points['lon'])
        dis['dis'],meandis=calculate_SD(model_points,drlon,drlat,drtime)
        #print meandis
        distance.extend(meandis)
        dis=replenish_data(dis,span_time)
        #print dis '''
        print 4
#########plot######
        plt.figure(1) 
        plt.title('drifter track and %s model track'%i)
        plt.plot(drifter_points['lon'],drifter_points['lat'],'bo-')
        #print len(drifter_points['lon'])
        #print model_points
        for a in range(len(model_points['lon'])):
            plt.plot(model_points['lon'][a],model_points['lat'][a],'ro-')
            #print len(model_points['lon'][a])
        #plt.legend(['drifter track','%s model track' %i] ,1)
        plt.grid(True)
        plt.savefig('drifter %s model %s track' %(ids,i) )
        plt.show()
        
        plt.figure(2) 
        plt.title('drifter %s different day SD'%ids)
        #print out_times,type(out_times),type(out_times[1]),dis_times,type(dis_times[1]),type(dis_times[1][1])
        plt.ylabel('distance(km)')        
        #plt.xticks((np.arange(len(out_times))),(out_times))
        #print len(distance)       
        for a in range(len(distance)):
            print dis['dis'][a]
            plt.plot(dis['dis'][a],label='%s model the %i day SD' % (i,a+1) )
            plt.text(len(dis['dis'][a])-1,dis['dis'][a][-1],'meandis=%.2f' %(distance[a]),color='red',fontsize=12)
            #plt.legend()'''
        '''plt.text(0,28,'meandis is mean separation distance',color='black',fontsize=12)'''
        plt.savefig('drifter %s model %s SD' %(ids,i) )
        plt.show()#different day drifter data maybe hiatus in different time'''
        '''plt.title('distance between drifter and %s model' %i)
        plt.xlabel('per hours')
        plt.xticks((np.arange(len(dr_points['time']))),(dr_points['time']))
        plt.ylabel('distance')'''
#### make a chat###      
        if i == 'ROMS':
            romsmeandis.append(np.mean(meandis))
            romsmindis.append(min(meandis))
            romsmaxdis.append(max(meandis))
        if i == '30yr':
            yrmeandis.append(np.mean(meandis))
            yrmindis.append(min(meandis))
            yrmaxdis.append(max(meandis))
        if i == 'GOM3':
            gommeandis.append(np.mean(meandis))
            gommindis.append(min(meandis))
            gommaxdis.append(max(meandis))
        if i == 'massbay':
            massmeandis.append(np.mean(meandis))
            massmindis.append(min(meandis))
            massmaxdis.append(max(meandis))
    drifterID.append(drifter_ID[q])
drifterID.append('mean')
data=[];tdata=[];model=[]
if 'ROMS' in Model:
    romsmeandis.append(np.mean(romsmeandis));romsmindis.append(min(romsmindis));romsmaxdis.append(max(romsmaxdis))
    data.append(romsmeandis);data.append(romsmindis);data.append(romsmaxdis);
    model.append('ROMS')
if '30yr' in Model:
    yrmeandis.append(np.mean(yrmeandis));yrmindis.append(min(yrmindis));yrmaxdis.append(max(yrmaxdis))
    data.append(yrmeandis);data.append(yrmindis);data.append(yrmaxdis);
    model.append('30yr')
if 'GOM3' in Model:
    gommeandis.append(np.mean(gommeandis));gommindis.append(min(gommindis));gommaxdis.append(max(gommaxdis))
    data.append(gommeandis);data.append(gommindis);data.append(gommaxdis);
    model.append('GOMS')
if 'massbay' in Model:
    massmeandis.append(np.mean(massmeandis));massmindis.append(min(massmindis));massmaxdis.append(max(massmaxdis))
    data.append(massmeandis);data.append(massmindis);data.append(massmaxdis);
    model.append('massbay')

tdata.append(drifterID)
for w in range(0,len(data),1):
    ldata=[]    
    for e in data[w]:
        e="%.2f" %e
        ldata.append(e)
    tdata.append(ldata)
        
chat=map(list, zip(*tdata))
#print chat
csvfile = file('drifter_vs_model.csv', 'wb')
writer = csv.writer(csvfile)
for i in range(len(model)):
    fh=['ids']
    fh.append('%s_meandis(m/h)' %i )
    fh.append('mindis(m)')
    fh.append('maxdis(m)')
writer.writerow(fh)
writer.writerows(chat)
csvfile.close() 

plt.plot(romsmeandis,'bo-')
plt.plot(yrmeandis,'ro-')
plt.savefig('sd compare')
plt.show() 

y=np.random.randn(len(distance))
plt.scatter(distance,y)
plt.savefig('all mean dis' )
plt.show() 
